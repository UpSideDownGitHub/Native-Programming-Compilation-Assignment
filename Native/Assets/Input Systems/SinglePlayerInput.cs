//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Input Systems/SinglePlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SinglePlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SinglePlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SinglePlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player_Map"",
            ""id"": ""070a6e0c-9755-4ebd-873c-c6ca7631b849"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""543034bb-2e43-4fc4-bd6f-6533dac98a9a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""f0f71bf7-f77c-4943-a364-17e9da486890"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""c15b658c-c5c9-4716-b5ff-04d0bc0cacc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""7d46dd6a-65d7-432c-83b9-e108df024ec8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""6f4dd690-2ab0-4b31-b9fc-2506c773c935"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""2b63fc9f-cbb2-4f04-b7ef-d7edefc90e4b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Value"",
                    ""id"": ""8c3b21eb-45cb-4396-852b-b8b3b9a483c8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a69234ba-4631-4c82-8bcb-06367b5cf494"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1b888794-1556-49b9-bd1b-7bd6ccda6a05"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""41c09827-198d-4bf7-ac15-3631ab2622b0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f589d71c-f97a-4714-a65f-1824bf3051f4"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d2a57d69-8be4-4cc7-856d-d62034d77d29"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c396575-63cd-4ebd-8f2b-9586fac526ff"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""52ebf70e-45ce-4fc5-99e4-d1b4ec378f7d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""220240f8-7b45-4066-993b-57edb4284167"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c7b11742-0f2d-4999-9e53-beb3c1f70a7a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""89c10ffa-6fb7-4659-aedf-bbbb49062f27"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f993765-9f6f-49d4-9620-365dd66c7b2d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8915b76b-adce-4b3b-85e3-cf7a261ec4ed"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c48e9bf-05c3-4ebd-b278-dc08382b99ac"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13ad6110-f91d-415f-b116-d205e05ee053"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b51228f9-4755-430c-b871-a3385a9d41d8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff3ef483-02b6-4c23-bce4-cbaaff36cd38"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52ba52e2-cf10-41cb-a825-cca230f2d4a0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a7bb807-5f9c-4dce-be24-747076f98c6b"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4179b52-5605-44b9-acf5-680506393447"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfc2d032-3c14-460e-abca-5fbc6efa66b0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus_Map"",
            ""id"": ""50e60038-a76c-4b78-9d0e-7d70af549bbb"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""c05fb386-fe99-4a96-9a15-9b6c324c3a7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""03a81ced-c8dd-487d-a9fb-56a565999f7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""8748f800-3348-4982-bfa3-fb9f86e7b358"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""298324ba-26d9-42fa-a200-edb4445cdc82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""ec17d190-e3fc-4ee0-ae7e-a3a915e94ba1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""694111e3-b52b-40df-ad03-721e4c9f0355"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53b3ace6-a89c-4135-b825-399d8ff384c3"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""827c2e2d-81d4-4349-b0a2-4e7b6894406e"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""016401ae-6791-4f0c-ac67-34b21466ab0e"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32031233-91b9-4643-902e-7819021e2684"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""857c21bd-4995-482e-8167-0be526681c04"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7923ef57-7c89-4e32-a221-91b0ebe02d10"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eadce2cf-3df9-41c2-8d44-0b938c0998a7"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""776f9633-96a8-465d-ad45-c88837b5bc10"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00030d23-46f6-4e52-b98d-8c071ab0e15a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e78f27a-3a1b-4bc3-a03f-c72a7b32f914"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Map
        m_Player_Map = asset.FindActionMap("Player_Map", throwIfNotFound: true);
        m_Player_Map_Movement = m_Player_Map.FindAction("Movement", throwIfNotFound: true);
        m_Player_Map_Mouse = m_Player_Map.FindAction("Mouse", throwIfNotFound: true);
        m_Player_Map_Pause = m_Player_Map.FindAction("Pause", throwIfNotFound: true);
        m_Player_Map_Dodge = m_Player_Map.FindAction("Dodge", throwIfNotFound: true);
        m_Player_Map_Shoot = m_Player_Map.FindAction("Shoot", throwIfNotFound: true);
        m_Player_Map_Throw = m_Player_Map.FindAction("Throw", throwIfNotFound: true);
        m_Player_Map_Pickup = m_Player_Map.FindAction("Pickup", throwIfNotFound: true);
        // Menus_Map
        m_Menus_Map = asset.FindActionMap("Menus_Map", throwIfNotFound: true);
        m_Menus_Map_Up = m_Menus_Map.FindAction("Up", throwIfNotFound: true);
        m_Menus_Map_Down = m_Menus_Map.FindAction("Down", throwIfNotFound: true);
        m_Menus_Map_Left = m_Menus_Map.FindAction("Left", throwIfNotFound: true);
        m_Menus_Map_Right = m_Menus_Map.FindAction("Right", throwIfNotFound: true);
        m_Menus_Map_A = m_Menus_Map.FindAction("A", throwIfNotFound: true);
        m_Menus_Map_B = m_Menus_Map.FindAction("B", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Map
    private readonly InputActionMap m_Player_Map;
    private IPlayer_MapActions m_Player_MapActionsCallbackInterface;
    private readonly InputAction m_Player_Map_Movement;
    private readonly InputAction m_Player_Map_Mouse;
    private readonly InputAction m_Player_Map_Pause;
    private readonly InputAction m_Player_Map_Dodge;
    private readonly InputAction m_Player_Map_Shoot;
    private readonly InputAction m_Player_Map_Throw;
    private readonly InputAction m_Player_Map_Pickup;
    public struct Player_MapActions
    {
        private @SinglePlayerInput m_Wrapper;
        public Player_MapActions(@SinglePlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Map_Movement;
        public InputAction @Mouse => m_Wrapper.m_Player_Map_Mouse;
        public InputAction @Pause => m_Wrapper.m_Player_Map_Pause;
        public InputAction @Dodge => m_Wrapper.m_Player_Map_Dodge;
        public InputAction @Shoot => m_Wrapper.m_Player_Map_Shoot;
        public InputAction @Throw => m_Wrapper.m_Player_Map_Throw;
        public InputAction @Pickup => m_Wrapper.m_Player_Map_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_Player_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_MapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_MapActions instance)
        {
            if (m_Wrapper.m_Player_MapActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnMovement;
                @Mouse.started -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnMouse;
                @Mouse.performed -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnMouse;
                @Mouse.canceled -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnMouse;
                @Pause.started -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnPause;
                @Dodge.started -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnDodge;
                @Dodge.performed -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnDodge;
                @Dodge.canceled -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnDodge;
                @Shoot.started -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnShoot;
                @Throw.started -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnThrow;
                @Pickup.started -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_Player_MapActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_Player_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Mouse.started += instance.OnMouse;
                @Mouse.performed += instance.OnMouse;
                @Mouse.canceled += instance.OnMouse;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public Player_MapActions @Player_Map => new Player_MapActions(this);

    // Menus_Map
    private readonly InputActionMap m_Menus_Map;
    private IMenus_MapActions m_Menus_MapActionsCallbackInterface;
    private readonly InputAction m_Menus_Map_Up;
    private readonly InputAction m_Menus_Map_Down;
    private readonly InputAction m_Menus_Map_Left;
    private readonly InputAction m_Menus_Map_Right;
    private readonly InputAction m_Menus_Map_A;
    private readonly InputAction m_Menus_Map_B;
    public struct Menus_MapActions
    {
        private @SinglePlayerInput m_Wrapper;
        public Menus_MapActions(@SinglePlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Menus_Map_Up;
        public InputAction @Down => m_Wrapper.m_Menus_Map_Down;
        public InputAction @Left => m_Wrapper.m_Menus_Map_Left;
        public InputAction @Right => m_Wrapper.m_Menus_Map_Right;
        public InputAction @A => m_Wrapper.m_Menus_Map_A;
        public InputAction @B => m_Wrapper.m_Menus_Map_B;
        public InputActionMap Get() { return m_Wrapper.m_Menus_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Menus_MapActions set) { return set.Get(); }
        public void SetCallbacks(IMenus_MapActions instance)
        {
            if (m_Wrapper.m_Menus_MapActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnDown;
                @Left.started -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnLeft;
                @Right.started -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnRight;
                @A.started -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnA;
                @B.started -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnB;
                @B.performed -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnB;
                @B.canceled -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnB;
            }
            m_Wrapper.m_Menus_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @B.started += instance.OnB;
                @B.performed += instance.OnB;
                @B.canceled += instance.OnB;
            }
        }
    }
    public Menus_MapActions @Menus_Map => new Menus_MapActions(this);
    public interface IPlayer_MapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
    public interface IMenus_MapActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
    }
}
